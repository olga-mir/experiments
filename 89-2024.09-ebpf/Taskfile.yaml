version: '3'

vars:
  SERVICE_NAME: experiment-ebpf
  LIMA_INSTANCE_NAME: ebpf-dev
  REGISTRY_REPO: "{{.SERVICE_NAME}}"

  PROJECT_ID:
    sh: echo "${PROJECT_ID:?'PROJECT_ID environment variable is required'}"
  REGION:
    sh: echo "${REGION:?'REGION environment variable is required'}"
  NETWORK:
    sh: echo "${NETWORK:?'NETWORK environment variable is required'}"
  SUBNETWORK:
    sh: echo "${SUBNETWORK:?'SUBNETWORK environment variable is required'}"
  SERVICE_ACCOUNT:
    sh: echo "{{.SERVICE_NAME}}@{{.PROJECT_ID}}.iam.gserviceaccount.com"
  GIT_COMMIT:
    sh: git rev-parse --short HEAD

  ARTIFACT_REGISTRY: "{{.REGION}}-docker.pkg.dev"
  IMAGE_PATH: "{{.ARTIFACT_REGISTRY}}/{{.PROJECT_ID}}/{{.REGISTRY_REPO}}/{{.SERVICE_NAME}}"

tasks:
  validate-env:
    desc: Validate all required environment variables are set
    cmds:
      - echo "Validating environment variables..."
      - echo "PROJECT_ID={{.PROJECT_ID}}"
      - echo "REGION={{.REGION}}"
      - echo "NETWORK={{.NETWORK}}"
      - echo "SUBNETWORK={{.SUBNETWORK}}"
      - echo "All required variables are set!"

  lima-start:
    desc: Start lima instance
    cmds:
      - limactl start --name {{.LIMA_INSTANCE_NAME}} {{.TASKFILE_DIR}}/lima-ebpf.yaml --tty=false

  ensure-artifact-registry:
    internal: true
    desc: Create Artifact Registry repository if it doesn't exist
    cmds:
      - |
        if ! gcloud artifacts repositories describe {{.SERVICE_NAME}} --location={{.REGION}} 2>/dev/null; then
          echo "Creating Artifact Registry repository..."
          gcloud artifacts repositories create {{.SERVICE_NAME}} \
            --repository-format=docker \
            --location={{.REGION}} \
            --description="Repository for eBPF experiments"
        fi

  ensure-service-account:
    internal: true
    desc: Ensure service account exists and has proper permissions
    status:
      - gcloud iam service-accounts describe {{.SERVICE_ACCOUNT}} 2>/dev/null
    cmds:
      - echo "Setting up service account {{.SERVICE_ACCOUNT}}..."
      - gcloud iam service-accounts create {{.SERVICE_NAME}} --display-name="Cloud Run experiment eBPF https://github.com/olga-mir/experiments/tree/main/89-2024.09-ebpf" || true
      - >
        gcloud projects add-iam-policy-binding {{.PROJECT_ID}}
        --member="serviceAccount:{{.SERVICE_ACCOUNT}}"
        --role="roles/run.invoker"
      - >
        gcloud projects add-iam-policy-binding {{.PROJECT_ID}}
        --member="user:${USER_EMAIL:?'USER_EMAIL environment variable is required'}"
        --role="roles/iam.serviceAccountUser"
        --condition=None

  deploy-cloud-run:
    desc: Deploy image to Cloud Run env
    deps: [validate-env, ensure-service-account]
    cmds:
      - echo "Deploying {{.SERVICE_NAME}} to Cloud Run in {{.REGION}}"
      - >
        gcloud run deploy {{.SERVICE_NAME}}
        --image {{.IMAGE_PATH}}:latest
        --region {{.REGION}}
        --no-allow-unauthenticated
        --network {{.NETWORK}}
        --subnet {{.SUBNETWORK}}
        --ingress internal
        --vpc-egress all-traffic
        --execution-environment gen2
        --service-account {{.SERVICE_ACCOUNT}}
        --set-env-vars=PROJECT_ID={{.PROJECT_ID}}

  docker-auth:
    desc: Configure Docker authentication for Artifact Registry.
    # while this can be done inside lima with some effort, it is just easier to do from local:
    # "gcloud": executable file not found in $PATH
    # Error: Cannot perform an interactive login from a non TTY device
    cmds:
      - limactl shell {{.LIMA_INSTANCE_NAME}} docker login -u oauth2accesstoken --password-stdin {{.ARTIFACT_REGISTRY}} <<< $(gcloud auth print-access-token)

  lima-build-image:
    desc: Build image inside Lima instance
    # deps: [docker-auth] # currently not setup to run gcloud from lima instance
    vars:
      FULL_IMAGE_TAG: '{{.IMAGE_PATH}}:{{.GIT_COMMIT}}'
    cmds:
      - >
        docker buildx build -f Dockerfile
        -t {{.FULL_IMAGE_TAG}}
        -t {{.IMAGE_PATH}}:latest
        --platform linux/amd64
        --push .

  lima-cleanup:
    desc: Stop and remove lima instance
    cmds:
      - limactl stop {{.LIMA_INSTANCE_NAME}} || true
      - limactl delete {{.LIMA_INSTANCE_NAME}} || true

  help:
    desc: Show list of available tasks and their descriptions
    cmds:
      - task --list
