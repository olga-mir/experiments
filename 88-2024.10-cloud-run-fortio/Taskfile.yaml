version: '3'

vars:
  PROJECT_ID:
    sh: echo "${PROJECT_ID:?'PROJECT_ID environment variable is required'}"
  REGION:
    sh: echo "${REGION:?'REGION environment variable is required'}"
  NETWORK:
    sh: echo "${NETWORK:?'NETWORK environment variable is required'}"
  SUBNETWORK:
    sh: echo "${SUBNETWORK:?'SUBNETWORK environment variable is required'}"
  USER_EMAIL:
    sh: echo "${USER_EMAIL:?'USER_EMAIL environment variable is required'}"

  # Service configuration
  SERVICE_NAME: cloudrun-info
  SERVICE_ACCOUNT: '{{.SERVICE_NAME}}@{{.PROJECT_ID}}.iam.gserviceaccount.com'
  FORTIO_SERVICE_ACCOUNT: 'fortio@{{.PROJECT_ID}}.iam.gserviceaccount.com'
  SRC_FORTIO_SERVICE_NAME: src-fortio
  DEST_FORTIO_SERVICE_NAME: dest-fortio

  # Artifact Registry configuration
  REGISTRY_REPO: cloud-run-apps
  IMAGE_PATH: '{{.REGION}}-docker.pkg.dev/{{.PROJECT_ID}}/{{.REGISTRY_REPO}}/{{.SERVICE_NAME}}'

  # Build configuration
  BUILD_TIME:
    sh: date -u '+%Y-%m-%d_%H:%M:%S'
  GIT_COMMIT:
    sh: git rev-parse HEAD
  LDFLAGS: '-X main.buildTime={{.BUILD_TIME}} -X main.gitCommit={{.GIT_COMMIT}}'

tasks:
  ensure-service-account:
    desc: Ensure service account exists and has proper permissions
    internal: true
    status:
      - gcloud iam service-accounts describe {{.SERVICE_ACCOUNT}} || exit 1
      #- gcloud iam service-accounts describe {{.SERVICE_ACCOUNT}} --quiet 2>/dev/null
      #- gcloud projects get-iam-policy {{.PROJECT_ID}} --format='get(bindings[].members)' | grep "serviceAccount:{{.SERVICE_ACCOUNT}}"
      #- gcloud projects get-iam-policy {{.PROJECT_ID}} --format='get(bindings[].members)' | grep "user:{{.USER_EMAIL}}" | grep "roles/iam.serviceAccountUser"
    cmds:
      - echo "Setting up service account {{.SERVICE_ACCOUNT}}..."
      - gcloud iam service-accounts create {{.SERVICE_NAME}} --display-name="Cloud Run Info Service" || true
      - >
        gcloud projects add-iam-policy-binding {{.PROJECT_ID}}
        --member="serviceAccount:{{.SERVICE_ACCOUNT}}"
        --role="roles/run.invoker"
      - >
        gcloud projects add-iam-policy-binding {{.PROJECT_ID}}
        --member="user:{{.USER_EMAIL}}"
        --role="roles/iam.serviceAccountUser"
        --condition=None

  ensure-fortio-service-account:
    desc: Ensure Fortio service account exists and has proper permissions
    internal: true
    vars:
      SA_NAME: 'fortio'
      SA_EMAIL: '{{.FORTIO_SERVICE_ACCOUNT}}'
    status:
      - gcloud iam service-accounts describe {{.SA_EMAIL}} --quiet 2>/dev/null
      - gcloud projects get-iam-policy {{.PROJECT_ID}} --format='get(bindings[].members)' | grep "serviceAccount:{{.SA_EMAIL}}"
      - gcloud projects get-iam-policy {{.PROJECT_ID}} --format='get(bindings[].members)' | grep "user:{{.USER_EMAIL}}" | grep "roles/iam.serviceAccountUser"
    cmds:
      - echo "Setting up Fortio service account {{.SA_EMAIL}}..."
      - gcloud iam service-accounts create {{.SA_NAME}} --display-name="Fortio Load Testing Service" || true
      - >
        gcloud projects add-iam-policy-binding {{.PROJECT_ID}}
        --member="serviceAccount:{{.SA_EMAIL}}"
        --role="roles/run.invoker"
      - >
        gcloud projects add-iam-policy-binding {{.PROJECT_ID}}
        --member="user:{{.USER_EMAIL}}"
        --role="roles/iam.serviceAccountUser"
        --condition=None

  build-push-image:
    desc: Build and push Docker image to Artifact Registry
    dir: src
    sources:
      - Dockerfile
      - main.go
      - pkg/**/*.go
      - go.mod
      - go.sum
    method: checksum
    vars:
      FULL_IMAGE_TAG: '{{.IMAGE_PATH}}:{{.GIT_COMMIT}}'
    cmds:
      - echo "Building and pushing image to {{.FULL_IMAGE_TAG}}"
      # https://github.com/olga-mir/experiments/blob/c463d0e08acbbdce3ff7447b6dfcaab005330c45/88-2024.10-cloud-run-fortio/docs/cloudrun-info-dump.json#L53-L56
      # Cloud Run runs in gvisor with `Linux localhost 4.4.0 #1 SMP Sun Jan 10 15:06:54 PST 2016 x86_64 Linux` amd64
      - >
        docker buildx build -f Dockerfile
        --platform linux/amd64
        --build-arg LDFLAGS="{{.LDFLAGS}}"
        -t {{.FULL_IMAGE_TAG}}
        -t {{.IMAGE_PATH}}:latest
        --push .

  deploy-info:
    desc: Deploy the cloudrun-info service with security configurations
    deps: [build-push-image, ensure-service-account]
    cmds:
      - echo "Deploying {{.SERVICE_NAME}} to Cloud Run in {{.REGION}}"
      - >
        gcloud run deploy {{.SERVICE_NAME}}
        --image {{.IMAGE_PATH}}:{{.GIT_COMMIT}}
        --region {{.REGION}}
        --no-allow-unauthenticated
        --network {{.NETWORK}}
        --subnet {{.SUBNETWORK}}
        --ingress internal
        --vpc-egress all-traffic
        --execution-environment gen2
        --service-account {{.SERVICE_ACCOUNT}}
        --set-env-vars=PROJECT_ID={{.PROJECT_ID}}
      - echo "Setting up IAM policies..."
      - >
        gcloud run services add-iam-policy-binding {{.SERVICE_NAME}}
        --region={{.REGION}}
        --member="user:{{.USER_EMAIL}}"
        --role="roles/run.invoker"

  deploy-src-fortio:
    desc: Deploy Fortio load testing service
    #deps: [ensure-fortio-service-account]
    cmds:
      - echo "Deploying SRC Fortio to Cloud Run in {{.REGION}}"
      - >
        gcloud run deploy {{.SRC_FORTIO_SERVICE_NAME}}
        --project {{.PROJECT_ID}}
        --image fortio/fortio
        --region {{.REGION}}
        --no-allow-unauthenticated
        --network {{.NETWORK}}
        --subnet {{.SUBNETWORK}}
        --ingress internal
        --vpc-egress all-traffic
        --execution-environment gen2
        --tag {{.SRC_FORTIO_SERVICE_NAME}}
        --tag all-cloudruns
        --service-account {{.FORTIO_SERVICE_ACCOUNT}}
      - >
        gcloud run services add-iam-policy-binding fortio
        --project {{.PROJECT_ID}}
        --region={{.REGION}}
        --member="user:{{.USER_EMAIL}}"
        --role="roles/run.invoker"

  deploy-dest-fortio:
    desc: Deploy Fortio load testing service
    #deps: [ensure-fortio-service-account]
    cmds:
      - echo "Deploying DEST Fortio to Cloud Run in {{.REGION}}"
      - >
        gcloud run deploy {{.DEST_FORTIO_SERVICE_NAME}}
        --project {{.PROJECT_ID}}
        --image fortio/fortio
        --region {{.REGION}}
        --no-allow-unauthenticated
        --network {{.NETWORK}}
        --subnet {{.SUBNETWORK}}
        --ingress internal
        --vpc-egress all-traffic
        --execution-environment gen2
        --tag {{.DEST_FORTIO_SERVICE_NAME}}
        --tag all-cloudruns
        --service-account {{.FORTIO_SERVICE_ACCOUNT}}
      - >
        gcloud run services add-iam-policy-binding dest-fortio
        --project {{.PROJECT_ID}}
        --region={{.REGION}}
        --member="user:{{.USER_EMAIL}}"
        --role="roles/run.invoker"

  print-authed-load-test-request:
    desc: Print command to run Fortio load test (set BASTION env var to the name of bastion VM)
    cmds:
      - >
        - SOURCE_CLOUD_RUN_URL=$(gcloud run services describe src-fortio --region={{.REGION}} --format='value(status.url)')
        - TARGET_CLOUD_RUN_URL=$(gcloud run services describe dest-fortio --region={{.REGION}} --format='value(status.url)')
        - echo "GOOGLE_APPLICATION_CREDENTIALS must be set and contain a valid service account key"
        - HEADER=$(cd idtoken && TARGET_CLOUD_RUN_SERVICE={{.TARGET_CLOUD_RUN_URL}} go run main.go) TARGET_URL="{{.TARGET_CLOUD_RUN_URL}}" envsubst < tests/request-metadata-cr-to-cr-invoker.tpl.json > rendered.json
        - echo "copying rendered.json to the bastion host"
        - gcloud compute scp rendered.json $BASTION_HOST:/tmp/rendered.json --zone= --tunnel-through-iap
        - echo "Run this curl command on the bastion host (TOKEN should be set on the bastion host)"
        - echo "curl -H \"Authorization: Bearer \$TOKEN\" --data @/tmp/rendered.json \"{{.SOURCE_CLOUD_RUN_URL}}/fortio/rest/run?jsonPath=.metadata\""

  get-auth-token:
    desc: Get authentication token for accessing the service
    cmds:
      - gcloud auth print-identity-token

  get-service-url:
    desc: Get the service URL
    cmds:
      - gcloud run services describe {{.SERVICE_NAME}} --region={{.REGION}} --format='value(status.url)'

  call-service:
    desc: Print command to run on a VM on the CR network
    cmds:
      - |
        URL=$(task get-service-url)
        echo "curl -s -H \"Authorization: Bearer \$TOKEN\" $URL"

  help:
    desc: Show list of available tasks and their descriptions
    cmds:
      - task --list

